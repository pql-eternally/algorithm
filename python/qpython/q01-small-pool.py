"""
CPython解释器出于性能优化的考虑，把频繁使用的整数对象用一个叫small_ints的对象池缓存起来造成的。
small_ints缓存的整数值被设定为[-5, 256]这个区间，也就是说，在任何引用这些整数的地方，都不需要重新创建int对象，而是直接引用缓存池中的对象。
如果整数不在该范围内，那么即便两个整数的值相同，它们也是不同的对象。

CPython底层为了进一步提升性能还做了另一个设定，对于同一个代码块中值不在small_ints缓存范围内的整数，
如果同一个代码块中已经存在一个值与其相同的整数对象，那么就直接引用该对象，否则创建新的int对象。
需要大家注意的是，这条规则对数值型适用，但对字符串则需要考虑字符串的长度，这一点大家可以自行证明。

注意：运行时不能在idea中运行，有优化，要在控制台运行。

"""
a, b, c, d = 1, 1, 1000, 1000
print(a is b)
print(c is d)


def func():
    e = 1000
    f = 1000
    print(e is f)
    print(e is d)
    g = 1
    print(g is a)


if __name__ == '__main__':
    func()
